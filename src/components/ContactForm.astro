---
const {
  formAction = import.meta.env.PUBLIC_FORMSPREE_ENDPOINT,
  showTitle = true,
  showLabels = true,
  submitText = "Send"
} = Astro.props;
---

<form
  action={formAction}
  method="POST"
  class="grid gap-4 max-w-lg w-full"
  id="contactForm"
>
  {showTitle && <h2 class="text-2xl font-bold mb-2">Contact Me</h2>}

  <label class={showLabels ? "block" : "sr-only"}>
    {showLabels && <span>Name</span>}
    <input type="text" name="name" required class="input input-bordered w-full" placeholder="Your name" />
  </label>

  <label class={showLabels ? "block" : "sr-only"}>
    {showLabels && <span>Email</span>}
    <input type="email" name="email" required class="input input-bordered w-full" placeholder="you@email.com" />
  </label>

  <label class={showLabels ? "block" : "sr-only"}>
    {showLabels && <span>Message</span>}
    <textarea name="message" rows="5" required class="textarea textarea-bordered w-full" placeholder="What can I help you with?" />
  </label>

  <input type="hidden" name="_subject" value="New Portfolio Inquiry" />
  <input type="hidden" name="_redirect" value="https://itsjustivan.com/thank-you" />

  <button type="submit" class="btn btn-primary mt-4">{submitText}</button>
</form>

<script is:inline>
  const form = document.getElementById('contactForm'); // Make sure your form has id="contactForm"
  const formStatus = document.getElementById('formStatus');

  form.addEventListener('submit', async (event) => {
    event.preventDefault(); // Prevent default form submission

    const formData = new FormData(form);
    const formUrl = form.action; // Get the Formspree endpoint from the form's action attribute

    formStatus.textContent = 'Sending message...';
    formStatus.className = 'mt-4 text-center block text-gray-700'; // Show and style status
    form.querySelector('button[type="submit"]').disabled = true; // Disable button

    try {
      const response = await fetch(formUrl, {
        method: 'POST',
        body: formData,
        headers: {
          'Accept': 'application/json' // Important for JSON response
        }
      });

      if (response.ok) { // Check if the request was successful (status 2xx)
        formStatus.textContent = 'Message sent successfully!';
        formStatus.className = 'mt-4 text-center block text-green-600 font-semibold'; // Style success
        form.reset(); // Clear the form

        // --- REDIRECTION LOGIC ---
        setTimeout(() => {
          window.location.replace('/thank-you'); // Redirect after 1.5 seconds
        }, 1500); // 1500 milliseconds = 1.5 seconds

      } else {
        const data = await response.json();
        if (Object.hasOwnProperty.call(data, 'errors')) {
          formStatus.textContent = data["errors"].map(error => error["message"]).join(", ");
        } else {
          formStatus.textContent = 'Oops! There was a problem sending your message.';
        }
        formStatus.className = 'mt-4 text-center block text-red-600 font-semibold'; // Style error
        form.querySelector('button[type="submit"]').disabled = false; // Re-enable button
      }
    } catch (error) {
      formStatus.textContent = 'Oops! There was a network error.';
      formStatus.className = 'mt-4 text-center block text-red-600 font-semibold'; // Style error
      form.querySelector('button[type="submit"]').disabled = false; // Re-enable button
      console.error('Fetch error:', error);
    }
  });
</script>